{{- if not .NoNotice }}
// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.
{{- end }}

package {{ .DestPackage }}

{{ if gt (len .Imports) 0 -}}
import (
    {{- range .Imports }}
    {{ . }}
    {{- end }}
)
{{- end }}

{{- $builder := print .Name "Builder" }}
{{- $fullname := .Name }}
{{- if not (eq .SourcePackage "") }}
{{- $fullname = print .SourcePackage "." .Name }}
{{- end }}

// {{ $builder }} is an alias of {{ .Name }} to build {{ .Name }} with builder-pattern.
type {{ $builder }} {{ $fullname }}

// New{{ $builder }} creates a new {{ $builder }}.
func New{{ $builder }}() *{{ $builder }} {
    return &{{ $builder }}{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *{{ $builder }}) Copy() *{{ $builder }} {
    c := *b
    return &c
}

// Build returns built {{ .Name }}.
func (b *{{ $builder }}) Build() (*{{ $fullname }}{{ if and .UseValidator .HasValidate }}, error{{ end }}) {
    {{- if gt (len .DefaultFuncs) 0 }}
    b = b{{ range .DefaultFuncs }}.{{ . }}(){{ end }}
    {{ end -}}

    c := ({{ $fullname }})(*b)
    {{- if and .UseValidator .HasValidate  }}
    if err := validator.New().Struct(c); err != nil {
        return nil, fmt.Errorf("failed to validate '{{ .Name }}' struct: %w", err)
    }
    return &c, nil
    {{- else }}
    return &c
    {{- end }}
}

{{- range .Properties }}
{{- if not .Ignore }}

// Set{{ .Name }} sets {{ $.Name }}'s {{ .Name }}.
{{- if .Append }}
func (b *{{ $builder }}) Set{{ .Name }}({{ .ParamName }} ...{{ .AlteredType }}) *{{ $builder }} {
    {{- if hasPrefix .InitialType "*" }}
    *b.{{ .Name }} = append(*b.{{ .Name }}, {{ .ParamName }}...)
    {{- else }}
    b.{{ .Name }} = append(b.{{ .Name }}, {{ .ParamName }}...)
    {{- end }}
    return b
}
{{- else }}
func (b *{{ $builder }}) Set{{ .Name }}({{ .ParamName }} {{ if .Pointer }}*{{ end }}{{ .AlteredType }}) *{{ $builder }} {
    b.{{ .Name }} = {{ if and (not .Pointer) (hasPrefix .InitialType "*") }}&{{ end }}{{ .ParamName }}
    return b
}
{{- end }}
{{- end }}
{{- end }}
